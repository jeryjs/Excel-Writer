package main

import (
	"encoding/json"
	"fmt"
	"os"
	"strconv"
	"strings"

	"github.com/tealeg/xlsx/v3"
)

type SheetData struct {
	Sheet    string            `json:"sheet"`
	Mappings map[string]string `json:"mappings"`
}

func main() {
	args := os.Args
	// Check that we received the correct number of arguments
	if len(args) != 4 {
		fmt.Println("Usage: ./main.go <json> <input excel file> <output excel file>")
		// os.Exit(1)
	}

	if len(args) < 2 || args[1] == "" {
		actions := []string{
			`{"sheet": "IA", "mappings": {"E08": "CO1", "F08": "CO2", "G08": "CO3", "H08": "CO4", "I08": "CO5", "J08": "CO6", "K08": "CO1", "L08": "CO2", "M08": "CO3", "N08": "CO4", "O08": "CO5"}}`,
			`{"sheet": "IA", "mappings": {"E09": "5", "F09": "5", "G09": "5", "H09": "5", "I09": "5", "J09": "5", "K09": "5", "L09": "5", "M09": "5", "N09": "5", "O09": "5"}}`,
			`{"sheet": "IA", "mappings": {"E10": "3", "F10": "3", "G10": "3", "H10": "3", "I10": "3", "J10": "3", "K10": "3", "L10": "3", "M10": "3", "N10": "3", "O10": "3"}}`,
			`{"sheet": "IA", "mappings": {"E11": "4", "F11": "4", "G11": "4", "H11": "4", "I11": "4", "J11": "4", "K11": "4", "L11": "4", "M11": "4", "N11": "4", "O11": "4"}}`,
			`{"sheet": "IA", "mappings": {"E12": "5", "F12": "5", "G12": "5", "H12": "5", "I12": "5", "J12": "5", "K12": "5", "L12": "5", "M12": "5", "N12": "5", "O12": "5"}}`,
		}
		args = append(os.Args, "["+strings.Join(actions, ",")+"]")
	}

	if len(args) < 3 || args[2] == "" {
		args = append(args, "input2.xlsx")
	}

	if len(args) < 4 || args[3] == "" {
		args = append(args, "output.xlsx")
	}

	fmt.Println("Args: \n", args[1], args[2], args[3])

	// Unmarshal the JSON input
	var sheets []SheetData
	err := json.Unmarshal([]byte(args[1]), &sheets)
	if err != nil {
		fmt.Println("Error unmarshalling JSON:", err)
		os.Exit(1)
	}

	// Open the Excel file
	f, err := xlsx.OpenFile(args[2])
	if err != nil {
		fmt.Println("Error opening Excel file:", err)
		os.Exit(1)
	}

	// write the data to output excel file
	for _, sheet := range sheets {
		fmt.Printf("Sheet: %s  ->  ", sheet.Sheet)
		for key, value := range sheet.Mappings {
			x, y, _ := xlsx.GetCoordsFromCellIDString(key)
			fmt.Printf("%s : %s  |  ", key, value)

			cell, err := f.Sheet[sheet.Sheet].Cell(y, x)
			if err != nil {
				fmt.Println("Error getting cell:", err)
				continue
			}

			if _, err := strconv.ParseInt(value, 10, 64); err == nil {
				cell.SetNumeric(value)
			} else {
				cell.SetValue(value)
			}
		}
		fmt.Println()
	}

	err = f.Save(args[3])
	if err != nil {
		fmt.Println("Error saving Excel file:", err)
		os.Exit(1)
	}
}


package main

import (
	"encoding/json"
	"fmt"
	"os"
	"strings"

	"github.com/xuri/excelize/v2"
)

type SheetData struct {
	Sheet    string            `json:"sheet"`
	Mappings map[string]string `json:"mappings"`
}

func main() {
	args := os.Args
	// Check that we received the correct number of arguments
	if len(args) != 3 {
		fmt.Println("Usage: ./main.go <json> <excel file>")
		// os.Exit(1)
	}

	if len(args) < 2 || args[1] == "" {
		actions := []string{
			`{"sheet": "START", "mappings": {"C06": "Test", "C07": "Test Position", "C08": "GoLang", "C09": "22GO01", "C10": "CSE/AI", "C11": "4", "C12": "2024"}}`,
			`{"sheet": "IA", "mappings": {"E08": "CO1", "F08": "CO2", "G08": "CO3", "H08": "CO4", "I08": "CO5", "J08": "CO6", "K08": "CO1", "L08": "CO2", "M08": "CO3", "N08": "CO4", "O08": "CO5"}}`,
			`{"sheet": "IA", "mappings": {"E09": "5", "F09": "5", "G09": "5", "H09": "5", "I09": "5", "J09": "5", "K09": "5", "L09": "5", "M09": "5", "N09": "5", "O09": "5"}}`,
			`{"sheet": "IA", "mappings": {"E10": "3", "F10": "3", "G10": "3", "H10": "3", "I10": "3", "J10": "3", "K10": "3", "L10": "3", "M10": "3", "N10": "3", "O10": "3"}}`,
			`{"sheet": "IA", "mappings": {"E11": "4", "F11": "4", "G11": "4", "H11": "4", "I11": "4", "J11": "4", "K11": "4", "L11": "4", "M11": "4", "N11": "4", "O11": "4"}}`,
			`{"sheet": "IA", "mappings": {"E12": "5", "F12": "5", "G12": "5", "H12": "5", "I12": "5", "J12": "5", "K12": "5", "L12": "5", "M12": "5", "N12": "5", "O12": "5"}}`,
		}
		args = append(os.Args, "["+strings.Join(actions, ",")+"]")
	}

	if len(args) < 3 || args[2] == "" {
		args = append(args, "input2.xlsx")
	}

	fmt.Println("Args: \n", args[1], args[2])

	// Unmarshal the JSON input
	var sheets []SheetData
	err := json.Unmarshal([]byte(args[1]), &sheets)
	if err != nil {
		fmt.Println("Error unmarshalling JSON:", err)
		os.Exit(1)
	}

	// Open the Excel file
	f, err := excelize.OpenFile(args[2])
	if err != nil {
		fmt.Println("Error opening Excel file:", err)
		os.Exit(1)
	}

	// write the data to output excel file
	for _, sheet := range sheets {
		fmt.Printf("Sheet: %s  ->  ", sheet.Sheet)
		for key, value := range sheet.Mappings {
			fmt.Printf("%s : %s  |  ", key, value)
			f.SetCellDefault(sheet.Sheet, key, value)
		}
		fmt.Println()
	}

	err = f.SaveAs("output.xlsx")
	if err != nil {
		fmt.Println("Error saving Excel file:", err)
		os.Exit(1)
	}
}
